---
- name: "Get latest release information for {{ name }}"
  uri:
    url: "{{ download_page }}"
    return_content: yes
    headers:
      User-Agent: "Mozilla/5.0 (X11; Linux x86_64)"
  register: pandoc_latest_release_info
  check_mode: no

- name: "Extract available {{ name }} version"
  set_fact:
    pandoc_available_version: "{{ pandoc_latest_release_info.url.split('/')[-1] | regex_replace('^v', '') if pandoc_latest_release_info.url is defined and pandoc_latest_release_info.url is not none else '' }}"

- name: "Print available {{ name }} version"
  debug:
    msg: "The available {{ name }} version is {{ pandoc_available_version }}"
  when: pandoc_available_version != ""

- name: "Construct {{ name }} .deb download URL"
  set_fact:
    pandoc_deb_url: "https://github.com/jgm/{{ name }}/releases/download/{{ pandoc_available_version }}/{{ name }}-{{ pandoc_available_version }}-1_amd64.deb"
  when: pandoc_available_version != ""

- name: "Print {{ name }} .deb URL"
  debug:
    msg: "The {{ name }} .deb URL is {{ pandoc_deb_url }}"
  when: pandoc_deb_url is defined

- name: "Check installed {{ name }} version"
  command: "dpkg-query -W -f='${Version}' {{ name }}"
  register: pandoc_installed_dpkg_query
  failed_when: false
  changed_when: false
  check_mode: no

- name: "Set installed {{ name }} version fact"
  set_fact:
    pandoc_installed_version: "{{ pandoc_installed_dpkg_query.stdout if pandoc_installed_dpkg_query.rc == 0 else '' }}"

- name: "Print installed {{ name }} version"
  debug:
    msg: "The installed {{ name }} version is {{ pandoc_installed_version }}"
  when: pandoc_installed_version != ""

- name: "Install {{ name }} from upstream deb package"
  apt:
    deb: "{{ pandoc_deb_url }}"
    state: present
  when:
    - pandoc_available_version != ""
    - pandoc_deb_url is defined
    - pandoc_installed_version == "" or (pandoc_available_version != (pandoc_installed_version | regex_replace('^\\d+:', '')))
